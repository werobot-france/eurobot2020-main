from datetime import datetime
from os import path
import json

class Recovery:
  
  '''
  Before using this helper class you have to specify a directory in which the recovery system can take place
  
  if u are on raspberrypi do this:
  https://www.raspberrypi.org/forums/viewtopic.php?p=837099
  
  append this line in /etc/fstab

  tmpfs /python-recovery tmpfs nodev,nosuid,size=2M 0 0
  
  '''
  
  
  def __init__(self, container):
    self.container = container
    self.cachePath = '/python-recovery/cache.txt'
    self.mainThread = None
    
  def run(self):
    # will start save setting from the position watcher every 2 secs
    print('> Recovery: Started!')
    while True:
      self.save()
      sleep(2)
      
  # will save all the params in the temp file
  def save(self):
    file = open(self.cachePath, 'w')
    data = {
      '_note': "autogenerated file by eurobot2020-main python script",
      'createdAt': str(datetime.now()),
      'data': {
        'pos': self.positionWatcher.getPos()
      }
    }
    file.write(json.dumps(data, indent=2))
    file.close()
  
  def getCache(self):
    if not path.exists(self.cachePath):
      return None
    file = open(self.cachePath, 'r')
    row = file.read()
    file.close()
    return json.loads(row)['data']

  # will load the values from the temp file to positionWatcher and arduinoManager
  def load(self):
    data = getCache()
    if data == None:
    else:
      print('> Recovery: ⚠️ USER ACTION REQUIRED ⚠️ , We found a recovery')
      print('> Recovery: Do you want to load this recovery (answer NO) ?')
      if input('>>> ').find('NO') != -1:
        print('> Recovery: ⚠️ DO YOU REALLY WANT TO DESTROY THIS RECOVERY? (yes/no)')
        if input('>>> ').find('YES') != -1:
          pass
      self.positionWatcher.setPos(data['pos'])
    
  def start(self):
    self.positionWatcher = self.container.get('positionWatcher')
    self.load()
    
    self.mainThread = ThreadHelper(target=self.run)
    self.mainThread.start()
    
  def stop(self):
    if self.mainThread != None:
      self.mainThread.stop()